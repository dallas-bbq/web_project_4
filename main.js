(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const t=function(){function t(e,n,r,o,i,a,u,c,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._data=e,this._id=n,this._likes=r,this._cardOwned=o,this._likedByOwner=i,this._cardTemplateSelector=a,this._handleCardClick=u,this._handleLikeClick=c,this._handleDeleteClick=s}var n,r;return n=t,(r=[{key:"createCardElement",value:function(){this._cardElement=this._getCardTemplate(),this._cardElement.querySelector(".card__delete").style.display=this._cardOwned?"block":"none";var e=this._cardElement.querySelector(".card__like");this._likedByOwner&&e.classList.add("card__like_act");var t=this._cardElement.querySelector(".card__image");return this._cardElement.querySelector(".card__text").textContent=this._data.name,t.style.backgroundImage="url(".concat(this._data.link,")"),t.alt=this._data.name,this._cardElement.querySelector(".card__like-count").textContent=this._likes.length,this._setEventListeners(),this._cardElement}},{key:"setLikes",value:function(e){this._likes=e,this._cardElement.querySelector(".card__like-count").textContent=this._likes.length}},{key:"_getCardTemplate",value:function(){return document.querySelector(this._cardTemplateSelector).content.querySelector(".places__item").cloneNode(!0)}},{key:"likeButtonToggle",value:function(){this._cardElement.querySelector(".card__like").classList.toggle("card__like_act")}},{key:"deleteCard",value:function(){this._cardElement.remove()}},{key:"_setEventListeners",value:function(){var e=this,t=this._cardElement.querySelector(".card__like"),n=this._cardElement.querySelector(".card__delete"),r=this._cardElement.querySelector(".card__image");t.addEventListener("click",(function(){return e._handleLikeClick()})),n.addEventListener("click",(function(){return e._handleDeleteClick()})),r.addEventListener("click",(function(){return e._handleCardClick(e._data.name,e._data.link)}))}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._config=t,this._formElement=n}var t,r;return t=e,(r=[{key:"_showError",value:function(e,t){var n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._config.inputErrorClass),n.classList.add(this._config.errorClass),n.textContent=t}},{key:"_hideError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.textContent="",t.classList.remove(this._config.errorClass)}},{key:"_toggleButton",value:function(e,t){t.every((function(e){return e.validity.valid}))?(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._config.inactiveButtonClass)):(this._submitButton.disabled=!0,this._submitButton.classList.add(this._config.inactiveButtonClass))}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideError(e):this._showError(e,e.validationMessage)}},{key:"_setEventListeners",value:function(){var e=this;this._submitButton=this._formElement.querySelector(this._config.submitButtonSelector),this._formInputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._formInputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButton(e._submitButton,e._formInputList)}))}))}},{key:"resetValidation",value:function(){var e=this;this._formInputList.forEach((function(t){e._hideError(t)})),this._toggleButton(this._submitButton,this._formInputList)}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&n(t.prototype,r),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const i=function(){function e(t,n){var r=t.data,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._initialArray=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._initialArray.forEach((function(t){e._renderer(t)}))}},{key:"setItem",value:function(e){this._container.prepend(e)}}])&&o(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const u=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._defaultButtonText=n,this._handleEscClose=this._handleEscClose.bind(this),this._submitButton=this._popup.querySelector(".popup__submit"),this.setEventListeners()}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_is_open"),document.addEventListener("keyup",this._handleEscClose)}},{key:"close",value:function(){document.removeEventListener("keyup",this._handleEscClose),this._popup.classList.remove("popup_is_open")}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleOverlayClose",value:function(e){e.target.classList.contains("popup")&&this.close()}},{key:"setLoadingButton",value:function(){this._submitButton.textContent="Saving..."}},{key:"setDefaultButton",value:function(){this._submitButton.textContent=this._defaultButtonText}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close").addEventListener("click",(function(){e.close()})),this._popup.addEventListener("click",(function(t){e._handleOverlayClose(t)}))}}])&&a(t.prototype,n),e}();function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=h(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=h(r);if(o){var n=h(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(n=[{key:"open",value:function(e,t){this._popup.querySelector(".popup__image").src=t,this._popup.querySelector(".popup__caption").textContent=e,l(h(a.prototype),"open",this).call(this)}}])&&s(t.prototype,n),a}(u);function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return(m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=k(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function a(e){var t,n=e.popupSelector,r=e.defaultButtonText,o=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n,r))._handleFormSubmit=o,t._inputList=t._popup.querySelectorAll(".popup__input"),t}return t=a,(n=[{key:"close",value:function(){this._form.reset(),m(k(a.prototype),"close",this).call(this)}},{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;this._form=this._popup.querySelector(".popup__form"),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())})),m(k(a.prototype),"setEventListeners",this).call(this)}}])&&_(t.prototype,n),a}(u);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t,n){return(w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=L(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function C(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=L(r);if(o){var n=L(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return C(this,e)});function a(e,t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e,t)}return t=a,(n=[{key:"handleConfirmClick",value:function(e){this._confirm=e}},{key:"setEventListeners",value:function(){var e=this;w(L(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._confirm()}))}}])&&S(t.prototype,n),a}(u);function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const P=function(){function e(t){var n=t.userNameSelector,r=t.userJobSelector,o=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(n),this._userJob=document.querySelector(r),this._avatarSelector=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,job:this._userJob.textContent,id:this._id}}},{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userJob.textContent=e.about,this._avatarSelector.style.backgroundImage="url(".concat(e.avatar,")"),this._id=e._id}}])&&B(t.prototype,n),e}();function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const T=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl=n,this.headers=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return fetch(this.baseUrl+"/users/me",{method:"GET",headers:this.headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;return fetch(this.baseUrl+"/users/me",{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"getCardsList",value:function(){return fetch(this.baseUrl+"/cards",{method:"GET",headers:this.headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"addCard",value:function(e){var t=e.name,n=e.link;return fetch(this.baseUrl+"/cards",{method:"POST",headers:this.headers,body:JSON.stringify({name:t,link:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"removeCard",value:function(e){return fetch(this.baseUrl+"/cards/"+"".concat(e),{method:"DELETE",headers:this.headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"addLike",value:function(e){return fetch(this.baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this.headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"deleteLike",value:function(e){return fetch(this.baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this.headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"setUserPic",value:function(e){var t=e.avatar;return fetch(this.baseUrl+"/users/me/avatar",{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}}])&&q(t.prototype,n),e}();var I={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},R=document.querySelector(".profile__edit"),x=document.querySelector(".profile__add"),U=document.querySelector(".popup__container_type-profile"),D=document.querySelector(".popup_add-card"),V=document.querySelector(".popup_edit-avatar"),A=(document.querySelector(".popup__image"),document.querySelector(".popup__caption"),document.querySelector(".popup__input_type-name")),N=document.querySelector(".popup__input_type-about-me"),J=(document.querySelector(".card__like"),document.querySelector(".profile__avatar-edit"));function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var G=new T({baseUrl:"https://around.nomoreparties.co/v1/group-10",headers:{authorization:"64475879-5827-45ba-be3f-04a139568764","Content-Type":"application/json"}}),H=new r(I,U),M=new r(I,D),z=new r(I,V),Y=new P({userNameSelector:".profile__name",userJobSelector:".profile__title",avatarSelector:".profile__avatar"}),$=new d(".popup_image-preview"),K=new j(".popup_confirm","Yes");H.enableValidation(),M.enableValidation(),z.enableValidation(),Promise.all([G.getUserInfo(),G.getCardsList()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(t,n)||function(e,t){if(e){if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];Y.setUserInfo(o);var u=new i({data:a,renderer:function(e){var t=Z(e);u.setItem(t)}},".places__list");u.renderItems();var c=new g({popupSelector:".popup_add-card",defaultButtonText:"Create",handleFormSubmit:function(e){c.setLoadingButton(),G.addCard(e).then((function(e){var t=Z(e);u.setItem(t),c.close()})).catch((function(e){console.log(e)}))}});x.addEventListener("click",(function(){c.open(),c.setDefaultButton(),M.resetValidation()}))}));var Q=new g({popupSelector:".popup_profile",defaultButtonText:"Save",handleFormSubmit:function(e){Q.setLoadingButton(),G.setUserInfo({name:e["user-name"],about:e["user-about"]}).then((function(e){Y.setUserInfo(e),Q.close()})).catch((function(e){console.log(e)}))}}),W=new g({popupSelector:".popup_edit-avatar",defaultButtonText:"Save",handleFormSubmit:function(e){W.setLoadingButton(),G.setUserPic({avatar:e["avatar-link"]}).then((function(e){Y.setUserInfo(e),W.close()})).catch((function(e){console.log(e)}))}}),X=function(e,t){$.open(e,t)},Z=function(e){var n=new t(e,e._id,e.likes,e.owner._id===Y._id,e.likes.some((function(e){return e._id===Y._id})),"#card-template",X,(function(){n._likedByOwner?(G.deleteLike(e._id).then((function(e){n.setLikes(e.likes),n.likeButtonToggle()})).catch((function(e){console.log(e)})),n._likedByOwner=!1):(G.addLike(e._id).then((function(e){n.setLikes(e.likes),n.likeButtonToggle()})).catch((function(e){console.log(e)})),n._likedByOwner=!0)}),(function(){K.setDefaultButton(),K.open(),K.handleConfirmClick((function(){K.setLoadingButton(),G.removeCard(e._id).then((function(e){return n.deleteCard()})).catch((function(e){console.log(e)})),K.close()}))}));return n.createCardElement()};R.addEventListener("click",(function(){var e=Y.getUserInfo(),t=e.name,n=e.job;A.value=t,N.value=n,Q.open(),Q.setDefaultButton(),H.resetValidation()})),J.addEventListener("click",(function(){W.setDefaultButton(),z.resetValidation(),W.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,